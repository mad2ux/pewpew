from Range import logic, render, types
from bgl import *

render.setMipmapping(0)

VERTEX_SHADER = """
uniform float width;
uniform float height;
uniform float pixelSize;

varying vec4 v_color;
varying vec3 v_lighting;
varying vec2 v_uv;
varying vec2 v_reflect;
varying float v_n;
varying float v_distance;    // Passing the snapped distance

void main() {
    // Snap vertex to pixel
    float ps = pixelSize;
    if (ps <= 0.0) { ps = 1.0; }
    else if (ps >= 10.0) { ps = 10.0; }

    float pw = width / ps;
    float ph = height / ps;
    vec4 P = gl_ModelViewMatrix * gl_Vertex;
    vec4 snap = gl_ModelViewProjectionMatrix * gl_Vertex;
    vec4 vertex = snap;
    vertex.xyz = snap.xyz / snap.w;
    vertex.x = floor(pw * vertex.x) / pw;
    vertex.y = floor(ph * vertex.y) / ph;
    vertex.xyz *= snap.w;

    // Basic vertex lighting
    vec3 N = normalize(gl_NormalMatrix * gl_Normal);
    vec3 V = -normalize(P.xyz);
    vec3 L = vec3(0.0);
    float attenuation = 1.0;
    vec3 lighting = gl_LightModel.ambient.rgb;

    for (int i = 0; i < gl_MaxLights; i++) {
        if (gl_LightSource[i].diffuse.a == 0.0) { continue; }
        if (0.0 == gl_LightSource[i].position.w) { // SUN
            attenuation = 1.0;
            L = normalize(gl_LightSource[i].position.xyz);
        } else { // POINT
            vec3 PL = (gl_LightSource[i].position - P).xyz;
            float dist = length(PL);
            attenuation = 1.0 / (dist + 0.0001);
            L = normalize(PL);
        }
        // TODO: SPOT
        float NdotL = dot(N, L);
        vec3 diff = attenuation 
                    * gl_LightSource[i].diffuse.rgb
                    * max(NdotL, 0.0);
        diff = clamp(diff, 0.0, 1.0);

        vec3 spec = vec3(0.0);
        if (NdotL >= 0.0) {
            spec = attenuation 
                * gl_LightSource[i].specular.rgb
                * gl_FrontMaterial.specular.rgb
                * pow(max(0.0, dot(reflect(-L, N), V)), gl_FrontMaterial.shininess);
            spec = clamp(spec, 0.0, 1.0);
        }
        lighting += clamp(diff + spec, 0.0, 1.0);
    }

    // Affine texture mapping
    float s = (lighting.r + lighting.g + lighting.b) / 3.0;
    float distance = length(P) + 0.0001;
    vec4 affinePos = vertex;
    vec2 uv = gl_MultiTexCoord0.st;

    float vws = (vertex.w * (s * 8.0));
    uv *= distance + vws / distance / 2.0;

    gl_Position = vertex;
    v_color = gl_Color;
    v_lighting = lighting;
    v_n = distance + vws / distance / 2.0;
    v_uv = uv;

    vec3 R = reflect(V, N);
    float m = 2.0 * sqrt(
        pow(R.x, 2.0) +
        pow(R.y, 2.0) +
        pow(R.z + 1.0, 2.0)
    );
    v_reflect = (R.xy / m + 0.5) * distance + vws / distance / 2.0;

    // Snap the distance to create mist snapping
    float fogSnapInterval = 1.0;  // Adjust this value to control fog snapping granularity
    v_distance = floor(distance / fogSnapInterval) * fogSnapInterval;
}
"""

FRAGMENT_SHADER = """
varying vec4 v_color;
varying vec3 v_lighting;
varying vec2 v_reflect;
varying vec2 v_uv;
varying float v_n;
varying float v_distance;  // Receiving the snapped distance

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform float tex0Enabled;
uniform float tex1Enabled;

uniform float fogStart;       // For mist simulation
uniform float fogEnd;         // For mist simulation
uniform vec3 fogColor;        // For mist simulation
uniform float darkenAmount;   // New uniform to control fog darkening

// Dithering function
float dither(vec2 coord) {
    float scale = 4.0; // Size of the dithering pattern
    return mod(coord.x + coord.y, scale) / scale;
}

void main() {
    vec4 tex = vec4(1.0);
    if (tex0Enabled >= 1.0) {
        tex *= texture2D(tex0, v_uv / vec2(v_n));
    }
    if (tex1Enabled >= 1.0) {
        vec4 col = texture2D(tex1, v_reflect / vec2(v_n));
        if (tex0Enabled >= 1.0) {
            tex += col;
        } else {
            tex.rgb *= mix(tex.rgb, col.rgb, col.a);
        }
    }
    tex.rgb = clamp(tex.rgb, 0.0, 1.0);
    vec3 computedColor = v_lighting * v_color.rgb * tex.rgb;

    // Mist simulation with dithering
    float fogFactor = (fogEnd - v_distance) / (fogEnd - fogStart);
    fogFactor = floor(fogFactor * 10.0) / 10.0; // Snapping original
    fogFactor += dither(gl_FragCoord.xy);       // Apply dithering
    fogFactor = clamp(fogFactor, 0.0, 1.0);

    // Adjust fog color to be darker in the gradient
    vec3 adjustedFogColor = fogColor * (1.0 - (1.0 - fogFactor) * darkenAmount);

    vec3 finalColor = mix(adjustedFogColor, computedColor, fogFactor);

    gl_FragColor = vec4(finalColor, v_color.a * tex.a);
}
"""

# The rest of the Python script remains unchanged.
# Use the PSX_Shader class to apply the shader to your camera.

class PSX_Shader(types.KX_Camera):
    def __init__(self, ob):
        self.__shaders = []
        self.__lightStatus = [False] * 16
        self.__pixelSize = 4

        # Mist parameters
        self.__fogStart = 100.0   # Start distance for fog
        self.__fogEnd = 2000.0     # End distance for fog
        self.__fogColor = (0.25, 0.25, 0.25)  # Color of the fog (gray)
        self.__darkenAmount = 0.75  # Amount to darken the fog color

        sce = self.scene
        for obj in sce.objects:
            if isinstance(obj, types.KX_GameObject):
                for mesh in obj.meshes:
                    for material in mesh.materials:
                        shader = material.getShader()
                        shader.setSource(VERTEX_SHADER, FRAGMENT_SHADER, True)
                        shader.setUniform1f("width", render.getWindowWidth())
                        shader.setUniform1f("height", render.getWindowHeight())
                        shader.setUniform1f("pixelSize", self.__pixelSize)
                        shader.setUniform1f("tex0Enabled", 0)
                        shader.setUniform1f("tex1Enabled", 0)
                        shader.setSampler("tex0", 0)
                        shader.setSampler("tex1", 1)
                        if material.textures[0] is not None:
                            shader.setUniform1f("tex0Enabled", 1.0)
                        if material.textures[1] is not None:
                            shader.setUniform1f("tex1Enabled", 1.0)
                        # Set fog uniforms
                        shader.setUniform1f("fogStart", self.__fogStart)
                        shader.setUniform1f("fogEnd", self.__fogEnd)
                        shader.setUniform3f("fogColor", *self.__fogColor)
                        shader.setUniform1f("darkenAmount", self.__darkenAmount)
                        self.__shaders.append(shader)
        
        # Disable all lights for viewport shading
        lightCount = Buffer(GL_INT, 1)
        glGetIntegerv(GL_MAX_LIGHTS, lightCount)
        lightCount = lightCount[0]
        
        for i in range(lightCount):
            ocolor = Buffer(GL_FLOAT, 4, [0.0, 0.0, 0.0, 0.0])
            glLightfv(GL_LIGHT0 + i, GL_DIFFUSE, ocolor)

    @property
    def pixelSize(self):
        return self.__pixelSize

    @pixelSize.setter
    def pixelSize(self, v):
        if v != self.__pixelSize:
            self.__pixelSize = v
            for shader in self.__shaders:
                shader.setUniform1f("pixelSize", self.__pixelSize)
                # Update fog uniforms if necessary
                shader.setUniform1f("fogStart", self.__fogStart)
                shader.setUniform1f("fogEnd", self.__fogEnd)
                shader.setUniform3f("fogColor", *self.__fogColor)
                shader.setUniform1f("darkenAmount", self.__darkenAmount)

    # Methods to update fog parameters
    @property
    def fogStart(self):
        return self.__fogStart

    @fogStart.setter
    def fogStart(self, v):
        if v != self.__fogStart:
            self.__fogStart = v
            for shader in self.__shaders:
                shader.setUniform1f("fogStart", self.__fogStart)

    @property
    def fogEnd(self):
        return self.__fogEnd

    @fogEnd.setter
    def fogEnd(self, v):
        if v != self.__fogEnd:
            self.__fogEnd = v
            for shader in self.__shaders:
                shader.setUniform1f("fogEnd", self.__fogEnd)

    @property
    def fogColor(self):
        return self.__fogColor

    @fogColor.setter
    def fogColor(self, v):
        if v != self.__fogColor:
            self.__fogColor = v
            for shader in self.__shaders:
                shader.setUniform3f("fogColor", *self.__fogColor)

    @property
    def darkenAmount(self):
        return self.__darkenAmount

    @darkenAmount.setter
    def darkenAmount(self, v):
        if v != self.__darkenAmount:
            self.__darkenAmount = v
            for shader in self.__shaders:
                shader.setUniform1f("darkenAmount", self.__darkenAmount)

def __s(cont):
    pass

def main(cont):
    if isinstance(cont.owner, types.KX_Camera):
        PSX_Shader(cont.owner)
        cont.script = __name__ + ".__s"
    else:
        print("ERROR: The PSX Shader must be applied to a Camera!")
        logic.endGame()
